<?php

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function matrix_menu() {
  $items = array();
  $items['matrix'] = array(
    'title' => '',
    'page callback' => 'matrix_compare_page',
    'access arguments' => array('access content'),
  );

  $items['matrix_cart'] = array(
    'title' => '',
    'page callback' => 'matrix_cart_page',
    'access arguments' => array('access content'),
  );

  $items['matrix_cart_ajax'] = array(
    'title' => '',
    'page callback' => 'matrix_cart_page_ajax',
    'access arguments' => array('access content'),
  );

  $items['save-order'] = array(
    'page callback' => 'matrix_save_order',
    'access arguments' => array('access content'),
  );

  $items['fix-products'] = array(
    'title' => '',
    'page callback' => 'matrix_fix_products',
    'access arguments' => array('access content'),
  );

  $items['get-shop-name'] = array(
    'title' => '',
    'page callback' => 'matrix_get_shop_from_product',
    'access arguments' => array('access content'),
  );
  return $items;
}

function matrix_block_info() {
  $blocks['matrix'] = array(
    'info' => t('Matrix - product compare page and cart system'),
  );
  return $blocks;
}

function matrix_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'matrix':
      $block['subject'] = t('Shopping list');
      $block['content'] = matrix_cart_page(TRUE) . '<input type="button" value="UgrÃ¡s a listaoldalra" onClick="self.location=\'/matrix_cart\';">';
      break;
  }
  return $block;
}

function matrix_preprocess_matrix_compare_page(&$variables) {
  drupal_add_css(drupal_get_path('module', 'matrix') . '/css/matrix_compare_page.css');
  drupal_add_js(drupal_get_path('module', 'matrix') . '/js/matrix_compare_page.js');
  drupal_add_js(drupal_get_path('module', 'matrix') . '/js/remodal/remodal.js');
  drupal_add_css(drupal_get_path('module', 'matrix') . '/js/remodal/remodal.css');
  drupal_add_css(drupal_get_path('module', 'matrix') . '/js/remodal/remodal-default-theme.css');

}

function matrix_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'matrix') . '/templates';

  $theme = array();
  $theme['matrix_compare_page'] = array(
    'variables' => array('vars' => NULL),
    'template' => 'matrix_compare_page',
    'path' => $path,
  );

  $theme['matrix_cart'] = array(
    'variables' => array('vars' => NULL),
    'template' => 'matrix_cart',
    'path' => $path,
  );

  $theme['matrix_cart_print'] = array(
    'variables' => array('vars' => NULL),
    'template' => 'matrix_cart_print',
    'path' => $path,
  );

  $theme['matrix_cart_block'] = array(
    'variables' => array('vars' => NULL),
    'template' => 'matrix_cart_block',
    'path' => $path,
  );

  return $theme;
}

function matrix_add_tr(&$row) {
   $row = $row . '<div style="clear: both;"></div>';
}

function matrix_add_plus_minus($class = 'input', $left) {
  $output = '';
  $output .= '';
  $output .= '<div class="plus-minus">';
  $output .= '<input type="button" value="-" class="matrix_val_change" data-source="' . $class . '_val" data-name="' . convert($left) . '">';
  $output .= '<input type="number" pattern="[0-9]*" id="' . $class . '_val" class="matrix_val" data-name="' . convert($left) . '">';
  //$output .= '<input type="number" id="' . $class . '_val" class="matrix_val_weight" data-category="' . $left . '" value="' . $weight . '">';
  $output .= '<input type="button" value="+" class="matrix_val_change" data-source="' . $class . '_val">';
  //$output .= '<div class="measure-selector measure-pc"><input class="default-measure" type="radio" value="pc" name="measure_' . $left . '">' . t('pieces') . '</div>';
  //$output .= '<div class="measure-selector measure-weight"><input type="radio" value="kg" name="measure_' . $left . '">' . t('weight') . '</div>';
  $output .= '</div>';
  return $output;
}

function matrix_add_bottom_button($class = 'input') {
  $output = '';
  $output .= '<input type="button" value="' . t('Add to my list') . '" class="' . $class . '_cart matrix_cart_button" data-name="' . $class . '">';
  return $output;
}

function matrix_tax2flat_array($terms) {
  $newterms = array();
  foreach ($terms as $term) {

    $newterms[] = (is_array($term)) ? $term['tid'] : $term->tid;
  }
  return $newterms;
}

function convert($string) {
  $string = strtolower($string);


  if ( !preg_match('/[\x80-\xff]/', $string) )
    return $string;

  $chars = array(
    // Decompositions for Latin-1 Supplement
    chr(195).chr(128) => 'A', chr(195).chr(129) => 'A',
    chr(195).chr(130) => 'A', chr(195).chr(131) => 'A',
    chr(195).chr(132) => 'A', chr(195).chr(133) => 'A',
    chr(195).chr(135) => 'C', chr(195).chr(136) => 'E',
    chr(195).chr(137) => 'E', chr(195).chr(138) => 'E',
    chr(195).chr(139) => 'E', chr(195).chr(140) => 'I',
    chr(195).chr(141) => 'I', chr(195).chr(142) => 'I',
    chr(195).chr(143) => 'I', chr(195).chr(145) => 'N',
    chr(195).chr(146) => 'O', chr(195).chr(147) => 'O',
    chr(195).chr(148) => 'O', chr(195).chr(149) => 'O',
    chr(195).chr(150) => 'O', chr(195).chr(153) => 'U',
    chr(195).chr(154) => 'U', chr(195).chr(155) => 'U',
    chr(195).chr(156) => 'U', chr(195).chr(157) => 'Y',
    chr(195).chr(159) => 's', chr(195).chr(160) => 'a',
    chr(195).chr(161) => 'a', chr(195).chr(162) => 'a',
    chr(195).chr(163) => 'a', chr(195).chr(164) => 'a',
    chr(195).chr(165) => 'a', chr(195).chr(167) => 'c',
    chr(195).chr(168) => 'e', chr(195).chr(169) => 'e',
    chr(195).chr(170) => 'e', chr(195).chr(171) => 'e',
    chr(195).chr(172) => 'i', chr(195).chr(173) => 'i',
    chr(195).chr(174) => 'i', chr(195).chr(175) => 'i',
    chr(195).chr(177) => 'n', chr(195).chr(178) => 'o',
    chr(195).chr(179) => 'o', chr(195).chr(180) => 'o',
    chr(195).chr(181) => 'o', chr(195).chr(182) => 'o',
    chr(195).chr(182) => 'o', chr(195).chr(185) => 'u',
    chr(195).chr(186) => 'u', chr(195).chr(187) => 'u',
    chr(195).chr(188) => 'u', chr(195).chr(189) => 'y',
    chr(195).chr(191) => 'y',
    // Decompositions for Latin Extended-A
    chr(196).chr(128) => 'A', chr(196).chr(129) => 'a',
    chr(196).chr(130) => 'A', chr(196).chr(131) => 'a',
    chr(196).chr(132) => 'A', chr(196).chr(133) => 'a',
    chr(196).chr(134) => 'C', chr(196).chr(135) => 'c',
    chr(196).chr(136) => 'C', chr(196).chr(137) => 'c',
    chr(196).chr(138) => 'C', chr(196).chr(139) => 'c',
    chr(196).chr(140) => 'C', chr(196).chr(141) => 'c',
    chr(196).chr(142) => 'D', chr(196).chr(143) => 'd',
    chr(196).chr(144) => 'D', chr(196).chr(145) => 'd',
    chr(196).chr(146) => 'E', chr(196).chr(147) => 'e',
    chr(196).chr(148) => 'E', chr(196).chr(149) => 'e',
    chr(196).chr(150) => 'E', chr(196).chr(151) => 'e',
    chr(196).chr(152) => 'E', chr(196).chr(153) => 'e',
    chr(196).chr(154) => 'E', chr(196).chr(155) => 'e',
    chr(196).chr(156) => 'G', chr(196).chr(157) => 'g',
    chr(196).chr(158) => 'G', chr(196).chr(159) => 'g',
    chr(196).chr(160) => 'G', chr(196).chr(161) => 'g',
    chr(196).chr(162) => 'G', chr(196).chr(163) => 'g',
    chr(196).chr(164) => 'H', chr(196).chr(165) => 'h',
    chr(196).chr(166) => 'H', chr(196).chr(167) => 'h',
    chr(196).chr(168) => 'I', chr(196).chr(169) => 'i',
    chr(196).chr(170) => 'I', chr(196).chr(171) => 'i',
    chr(196).chr(172) => 'I', chr(196).chr(173) => 'i',
    chr(196).chr(174) => 'I', chr(196).chr(175) => 'i',
    chr(196).chr(176) => 'I', chr(196).chr(177) => 'i',
    chr(196).chr(178) => 'IJ',chr(196).chr(179) => 'ij',
    chr(196).chr(180) => 'J', chr(196).chr(181) => 'j',
    chr(196).chr(182) => 'K', chr(196).chr(183) => 'k',
    chr(196).chr(184) => 'k', chr(196).chr(185) => 'L',
    chr(196).chr(186) => 'l', chr(196).chr(187) => 'L',
    chr(196).chr(188) => 'l', chr(196).chr(189) => 'L',
    chr(196).chr(190) => 'l', chr(196).chr(191) => 'L',
    chr(197).chr(128) => 'l', chr(197).chr(129) => 'L',
    chr(197).chr(130) => 'l', chr(197).chr(131) => 'N',
    chr(197).chr(132) => 'n', chr(197).chr(133) => 'N',
    chr(197).chr(134) => 'n', chr(197).chr(135) => 'N',
    chr(197).chr(136) => 'n', chr(197).chr(137) => 'N',
    chr(197).chr(138) => 'n', chr(197).chr(139) => 'N',
    chr(197).chr(140) => 'O', chr(197).chr(141) => 'o',
    chr(197).chr(142) => 'O', chr(197).chr(143) => 'o',
    chr(197).chr(144) => 'O', chr(197).chr(145) => 'o',
    chr(197).chr(146) => 'OE',chr(197).chr(147) => 'oe',
    chr(197).chr(148) => 'R',chr(197).chr(149) => 'r',
    chr(197).chr(150) => 'R',chr(197).chr(151) => 'r',
    chr(197).chr(152) => 'R',chr(197).chr(153) => 'r',
    chr(197).chr(154) => 'S',chr(197).chr(155) => 's',
    chr(197).chr(156) => 'S',chr(197).chr(157) => 's',
    chr(197).chr(158) => 'S',chr(197).chr(159) => 's',
    chr(197).chr(160) => 'S', chr(197).chr(161) => 's',
    chr(197).chr(162) => 'T', chr(197).chr(163) => 't',
    chr(197).chr(164) => 'T', chr(197).chr(165) => 't',
    chr(197).chr(166) => 'T', chr(197).chr(167) => 't',
    chr(197).chr(168) => 'U', chr(197).chr(169) => 'u',
    chr(197).chr(170) => 'U', chr(197).chr(171) => 'u',
    chr(197).chr(172) => 'U', chr(197).chr(173) => 'u',
    chr(197).chr(174) => 'U', chr(197).chr(175) => 'u',
    chr(197).chr(176) => 'U', chr(197).chr(177) => 'u',
    chr(197).chr(178) => 'U', chr(197).chr(179) => 'u',
    chr(197).chr(180) => 'W', chr(197).chr(181) => 'w',
    chr(197).chr(182) => 'Y', chr(197).chr(183) => 'y',
    chr(197).chr(184) => 'Y', chr(197).chr(185) => 'Z',
    chr(197).chr(186) => 'z', chr(197).chr(187) => 'Z',
    chr(197).chr(188) => 'z', chr(197).chr(189) => 'Z',
    chr(197).chr(190) => 'z', chr(197).chr(191) => 's',
    '/' => '_'
  );

  $string = strtr($string, $chars);
  $string = str_replace(' ', '_', $string);
  $string = str_replace(',', '_', $string);
  return $string;
}

function matrix_find_product($category, $shop) {
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_aruhaz', 'a', 'n.nid = a.entity_id');
  $query->leftJoin('field_data_field_kategoria', 'k', 'n.nid = k.entity_id');
  $query->leftJoin('field_data_field_ajanlott_a_heten_', 'aj', 'n.nid = aj.entity_id');
  $query->fields('n', array('type', 'title', 'nid'))
    ->fields('a', array('field_aruhaz_tid', 'entity_id'))
    ->fields('aj', array('field_ajanlott_a_heten__value', 'entity_id'))
    ->condition('n.type', 'products_display')
    ->condition('a.field_aruhaz_tid', $shop)
    ->condition('aj.field_ajanlott_a_heten__value', 1)
    ->condition('k.field_kategoria_tid', $category);
  $result = $query->execute();
  foreach ($result as $row) {
    $rowitem = $row->nid;
  }

  return $rowitem;

  /*$query->join('field_data_field_kategoria', 'k');
  $query->join('field_data_field_aruhaz', 'a');
  $query->condition('a', 519);
  $query->condition('a', 1925);
  $query->condition*/




}

function matrix_render_product_view($pid) {
  $output = views_embed_view('matrix_display', 'block_1', $pid);
  return $output;
}

function matrix_get_termname($tid) {
  $term = taxonomy_term_load($tid);
  if ($term->field_hosszunev[LANGUAGE_NONE][0]['safe_value']) {
    $termname = $term->field_hosszunev[LANGUAGE_NONE][0]['safe_value'];
  }
  else {
    $termname = $term->name;
  }
  return $termname;
}

function matrix_get_shop_url($tid) {
  $shop = taxonomy_term_load($tid);
  $url = $shop->field_url[LANGUAGE_NONE][0]['value'];
  return '<input type="button" value="Bolt webhelye" onClick="window.open(\'' . $url . '\');">';
}

function matrix_compare_page() {
  drupal_add_library('system', 'jquery.cookie');
  $colors = array('red', 'green', 'blue', 'purple', 'yellow');

  $nodes = node_load_multiple(array(), array('type' => 'heti_ajanlat'));
  $nodes = reset($nodes);
  $terms = $nodes->field_kategoria[LANGUAGE_NONE];
  $lefts = matrix_tax2flat_array($terms);
  //$lefts = array('Sajt', 'Hus', 'Sor', 'aaa', 'bbb');


  $vocabulary = taxonomy_vocabulary_machine_name_load('aruhaz');
  $terms2 = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  $terms2 = $nodes->field_shop[LANGUAGE_NONE];
  //$terms2 = taxonomy_term_load_multiple(array(519, 520, 2052, 2049));
  $tops = matrix_tax2flat_array($terms2);
  //$tops = array('Spar', 'Tesco', 'Lidl', 'CBA');

  $sumPrice = array();
  $sumWeight = array();
  foreach ($lefts as $left) {
    foreach ($tops as $top) {
      $pid = matrix_find_product($left, $top);
      $product = node_load($pid);
      $sumPrice[$top] += $product->field_akciosar[LANGUAGE_NONE][0]['value'];

    }
  }
  asort($sumPrice);
  foreach ($sumPrice as $key => $value) {
    $toplist[] = $key;
  }
  $terms2 = taxonomy_term_load_multiple($toplist);
  $tops = matrix_tax2flat_array($terms2);





  $header = '<div class="cell" id="corner"><div class="checkbox">' . t('Get it') . '</div><div class="pieces">' . t('Pieces') . '</div><div class="category">' . t('Category') . '</div></div>';
  $header .= '<div id="header">';
  $c = 0;
  foreach ($tops as $top) {
    $header .= '<div class="cell ' . convert($top) . '" data-name="' . convert($top) . '">' .  matrix_get_termname($top) . '</div>';
    $c++;
  }
  $header .= '</div>';
  matrix_add_tr($header);

  $sumPrice = array();
  $table = '<div id="tableBody">';
  $weight = 0;


  $sumPrice = array();
  foreach ($lefts as $left) {
    $table .= '<div class="table-row">';
    $table .= '<div class="cell starter_cell active" data-name="' . convert($left) . '"><input type="checkbox" class="check" CHECKED data-name="' . convert($left) . '">' . matrix_add_plus_minus('amount_' . convert($left), $left) . '<label>' . matrix_get_termname($left) . '</label></div>';
    $i = 0;
    foreach ($tops as $top) {
      $i++;
      $pid = matrix_find_product($left, $top);
      $product = '';
      if (!is_null($pid)) {
        $product = node_load($pid);
      }
      $weight = 0;

      if (!empty($product)) {
        //$product = node_view($product, 'diszkont');
        //$product = drupal_render($product);
        $product_title = l($product->title, '/node/' . $product->nid, array('target' => '_blank'));
        $product_view = matrix_render_product_view($product->nid);
        if (count($product->field_suly) > 0) {
          $wtid = $product->field_suly[LANGUAGE_NONE][0]['tid'];
          $weight = explode(' ', taxonomy_term_load($wtid)->name);
          $weight = $weight[0];
        }
        $price = $product->field_akciosar[LANGUAGE_NONE][0]['value'];
        $sumPrice[$top] += $price;

        $pproduct = node_load($product->field_termek[LANGUAGE_NONE][0]['nid']);
        $weight = $pproduct->field_darabsuly[LANGUAGE_NONE][0]['value'];
        $sumWeight[$top] += $weight;
      }
      else {
        $product_title = '-';
        $sumPrice[$top] += 0;
        $sumWeight[$top] += 0;
        $product_view = '<img width="180" src="http://www.menshealth.com/sites/menshealth.com/files/styles/slideshow-desktop/public/images/slideshow2/hunger%20roar.jpg">No_content';

      }
      $best = ($i == 1) ? 'best' : '';
      $table .= '<div class="cell ' . $best. ' ' . convert($top) . '" data-cell="' . convert($left) .'_' . convert($top) . '" data-category="' . convert($left) . '" data-shop="' . convert($top) . '" data-pid="' . $pid . '" data-weight="' . $weight . '" data-price="' . $price . '">' . $product_view . '</div>';
    }
//    $table .= '<div class="deleteRow" data-name="' . convert($left) . '">X</div>';
    $table .= '</div>';
    matrix_add_tr($table);

  }
  $table .= '</div>';


  /*$table .= '<select name="addRow" class="addRow">';
  $table .= '<option value="0"> ---- Add your selection! ---- </option>';
  foreach ($terms as $term) {
    if (!in_array($term->name, $lefts)) {
      $table .= '<option value="' . convert($term->name) . '">' . $term->name . '</option>';
    }
  }
  $table .= '</select>';

  matrix_add_tr($table);*/

  $table .= '<div class="summary-row">';
  $table .= '<div class="cell" id="corner">' . t('Summary') . '</div>';
  foreach ($tops as $top) {
    $table .= '<div class="sum-cell sum-price ' . convert($top) . '" data-shop="' . convert($top) . '">' . $sumPrice[$top] . ' Ft</div>';
  }
  matrix_add_tr($table);

  $table .= '<div class="cell" id="corner">' . t('Summary') . '</div>';
  foreach ($tops as $top) {
    $table .= '<div class="sum-cell sum-weight ' . convert($top) . '" data-shop="' . convert($top) . '">' . $sumWeight[$top] . ' Kg</div>';
  }
  matrix_add_tr($table);
  $table .= '</div>';

  /*$table .= '<div class="cell" id="corner">&nbsp</div>';
  foreach ($tops as $top) {
    $table .= '<div class="cell ' . convert($top) . '" data-shop="' . convert($top) . '"></div>';
  }
  matrix_add_tr($table);*/

  /*$table .= '<div class="cell" id="corner">&nbsp</div>';
  foreach ($tops as $top) {
    $table .= '<div class="cell ' . convert($top) . '" data-shop="' . convert($top) . '">' . matrix_get_shop_url($top) . '</div>';
  }
  matrix_add_tr($table);*/

  $table .= '<div class="cell" id="corner">&nbsp</div>';
  foreach ($tops as $top) {
    $table .= '<div class="button-cell ' . convert($top) . '" data-shop="' . convert($top) . '">' . matrix_add_bottom_button(convert($top)) . '</div>';
  }
  matrix_add_tr($table);

  $vars = array(
    'table' => $header . $table,
  );


  return theme('matrix_compare_page', $vars);
}

function matrix_cookie_to_items() {
  $cookie = $_COOKIE['diszkont'];
  $items = explode(',', $cookie);
  $line_items = array();
  foreach ($items as $item) {
    $parts = explode('|', $item);
    if (!empty($parts[1])) {
      $product = node_load($parts[1]);
      $shop = $product->field_aruhaz[LANGUAGE_NONE][0]['tid'];
      $offer = (empty($product->field_ajanlott_a_heten_[LANGUAGE_NONE][0]['value'])) ? 0 : $product->field_ajanlott_a_heten_[LANGUAGE_NONE][0]['value'];
      $amount = $parts[0];
      $line_item = array(
        'title' => $product->title,
        'amount' => $amount,
      );
      $line_items[$shop][$offer][$product->nid]['title'] = $product->title;
      $line_items[$shop][$offer][$product->nid]['amount'] += $amount;
    }
  }

  return $line_items;
}

function matrix_cart_page($block = FALSE) {
  drupal_add_library('system', 'jquery.cookie');
  drupal_add_js(drupal_get_path('module', 'matrix') . '/js/remodal/remodal.js');
  drupal_add_js(drupal_get_path('module', 'matrix') . '/js/matrix_compare_page.js');
  drupal_add_css(drupal_get_path('module', 'matrix') . '/css/matrix_compare_page.css');

  $line_items = matrix_cookie_to_items();
  $output = '';
  $output .= '<input type="button" id="save-order" value="LetÃ¶ltÃ¶m PDF formÃ¡tumban">';
  $output .= '<input type="button" id="email-order" value="ElkÃ¼ldÃ¶m e-mailben">';
  $output .= '<input type="button" id="print-order" value="Kinyomtatom">';
  $output .= '<input type="button" id="delete-order" value="X">';
  $output .= '<div id="discount-cart">';
  $output .= matrix_render_cart($line_items, 'matrix_cart', $block);
  $output .= '</div>';


  return $output;
}

function matrix_cart_page_ajax() {
  print matrix_cart_page(TRUE);
}

function matrix_render_cart($line_items, $format = '', $block) {
  $output = '';
  $template = $format;
  if ($block) {
    $template = 'matrix_cart_block';
  }
  foreach ($line_items as $sid => $line_item) {
    $shop = taxonomy_term_load($sid);
    $output .=  '<div class="shop-block ' . $template . ' shop-block-' . $sid . '">';
    $output .= '<div class="shop-header shop-header-' . $sid . '" data-shop="' . $sid . '"><h2>' . $shop->name . '</h2></div><div class="delete-shop" data-shop="' . $sid . '">X</div>';
    $output .=  '<div style="clear:both;>"></div>';
    $sumOfPrice = 0;
    $sumOfWeight = 0;
    foreach ($line_item as $type) {
      foreach ($type as $pid => $offered) {
        $product = node_load($pid);
        $pproduct = node_load($product->field_termek[LANGUAGE_NONE][0]['nid']);
        $weight = $pproduct->field_darabsuly[LANGUAGE_NONE][0]['value'];
        $price = $product->field_akciosar[LANGUAGE_NONE][0]['value'];
        $img_uri = $pproduct->field_termekfoto[LANGUAGE_NONE][0]['uri'];
        $percent = $product->field_szazalek[LANGUAGE_NONE][0]['value'];
        ($percent < 100) ?  $percent = $percent . '%' : $percent = '';
        $vars = array(
          'amount' => $offered['amount'],
          'product' => l($offered['title'], 'node/' . $pid),
          'weight' => $offered['amount'] * $weight,
          'price' => $offered['amount'] * $price,
          'pid' => $pid,
          'shop' => $sid,
          'origweight' => $weight,
          'origprice' => $price,
          'image' => theme('image_style', array('path' => $img_uri, 'style_name' => 'thumbnail')),
          'percent' => $percent,
        );
        $sumOfPrice += $offered['amount'] * $price;
        $sumOfWeight += $offered['amount'] * $weight;
        $output .= theme($template, $vars);
      }
    }


    $output .= matrix_get_shop_url($sid);
    $output .= '<input type="button" class="nearest-shop" value="LegkÃ¶zelebbi Ã¼zlet">';
    $output .= '<div class="totals-row"><label class="totals">' . t('Total: ') . '</label><span class="cart-sum-weight" data-shop="' . $sid . '">' . $sumOfWeight . '</span><span class="measurement"> kg</span><span class="cart-sum-price" data-shop="' . $sid . '">' . $sumOfPrice . ' </span><span class="measurement">Ft</span></div>';


    $output .= '</div>';


  }




  return $output;
}

function matrix_save_order() {
  global $user;
  $line_items = matrix_cookie_to_items();
  $output = matrix_render_cart($line_items, 'print');
  $node = entity_create('node', array('type' => 'order'));
  $entity = entity_metadata_wrapper('node',$node);

  $entity->author = $user->uid;
  $entity->title->set('Order');
  $entity->body->set(array('value' => $output, 'format' => 'full_html'));

  $entity->save();
  $nid = $entity->nid->value();
  print $nid;
}

function matrix_page_alter(&$page) {
  if (!isset($_COOKIE['Drupal_visitor_diszkont_uid'])) {
    user_cookie_save(array('diszkont_uid' => uniqid()));
  }
  drupal_add_css(drupal_get_path('module', 'matrix') . '/css/matrix_mail.css');
  $a2 = arg(2);
  $a1 = arg(1);
  if (arg(0) == 'osszes-akcio'
    or (arg(0) == 'node' && isset($a1) && !isset($a2))
    or (arg(0) == 'taxonomy' && arg(1) == 'term' && isset($a2))) {
    drupal_add_js(drupal_get_path('module', 'matrix') . '/js/add_list_item.js');
    drupal_add_js(drupal_get_path('module', 'matrix') . '/js/matrix_compare_page.js');

  }
}

/**
 * Implements hook_form_alter().
 */
function matrix_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_css(drupal_get_path('module', 'matrix') . '/css/matrix_mail.css');

  if ($form_id == 'print_mail_form') {
    $form['txt_message']['#default_value'] = t('Sent from diszkontkereso.hu');
    $form['txt_to']['addrs']['#title'] = t('Your e-mail');
    $form['fld_from_addr']['#default_value'] = 'info@diszkonkereso.hu';
    $form['fld_from_addr']['#value'] = 'info@diszkonkereso.hu';
    $form['fld_from_name']['#value'] = 'info@diszkonkereso.hu';
    $form['fld_subject']['#value'] = 'You can view your order on this link';


  }
}

function matrix_fix_products() {
  $output = '';
  $nodes = node_load_multiple(array(), array('type' => 'products_display'));
  foreach ($nodes as $node) {
    $price1 = $node->field_akciosar[LANGUAGE_NONE][0]['value'];
    $price2 = $node->field_ar[LANGUAGE_NONE][0]['value'];
    $output .= $node->nid . ' - ' . $price1 . ':' . $price2 . '<hr />';
    if ($price1 == $price2) {
      $node->field_ar = array();
      node_save($node);
    }
  }
  return $output;
}

function matrix_get_shop_from_product() {
  $list = $_POST['order'];
  $parts = explode(',', $list);
  $parts = explode('|', $parts[0]);
  $nid = $parts[1];
  $node = node_load($nid);
  $shop = $node->field_aruhaz[LANGUAGE_NONE][0]['tid'];
  $term = taxonomy_term_load($shop);
  print $term->name;
}