<?php
module_load_include('inc', 'friends', 'includes/friends.block');
module_load_include('inc', 'friends', 'includes/friends_sandbox.page');

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function matrix_menu() {
  $items = array();
  $items['matrix'] = array(
    'title' => 'Compare tool',
    'page callback' => 'matrix_compare_page',
    'access arguments' => array('access content'),
  );
  return $items;
}

function matrix_preprocess_matrix_compare_page(&$variables) {
  drupal_add_css(drupal_get_path('module', 'matrix') . '/css/matrix_compare_page.css');
  drupal_add_js(drupal_get_path('module', 'matrix') . '/js/matrix_compare_page.js');
}

function matrix_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'matrix') . '/templates';

  $theme = array();
  $theme['matrix_compare_page'] = array(
    'variables' => array('vars' => NULL),
    'template' => 'matrix_compare_page',
    'path' => $path,
  );

  $theme['matrix_cart'] = array(
    'variables' => array('vars' => NULL),
    'template' => 'matrix_cart',
    'path' => $path,
  );

  return $theme;
}

function matrix_add_tr(&$row) {
   $row = $row . '<div style="clear: both;"></div>';
}

function matrix_add_plus_minus($class = 'input') {
  $output = '';
  $output .= '<input type="checkbox" class="check">';
  $output .= '<div class="plus-minus invisible">';
  $output .= '<input type="button" value="-" class="matrix_val_change" data-source="' . $class . '_val">';
  $output .= '<input type="number" pattern="[0-9]*" id="' . $class . '_val" class="matrix_val">';
  $output .= '<input type="button" value="+" class="matrix_val_change" data-source="' . $class . '_val">';
  $output .= '</div>';
  return $output;
}

function matrix_add_bottom_button($class = 'input') {
  $output = '';
  $output .= '<input type="button" value="this" class="' . $class . '_cart matrix_cart_button" data-name="' . $class . '">';
  return $output;
}

function matrix_tax2flat_array($terms) {
  $c = 0;
  $newterms = array();
  foreach ($terms as $term) {
    $term = reset($term);
    $term = taxonomy_term_load($term);
    $newterms[] = $term->name;
    $c++;
    if ($c == 4) {
      break;
    }
  }
  return $newterms;
}

function convert($string) {
  $string = strtolower($string);

  if ( !preg_match('/[\x80-\xff]/', $string) )
    return $string;

  $chars = array(
    // Decompositions for Latin-1 Supplement
    chr(195).chr(128) => 'A', chr(195).chr(129) => 'A',
    chr(195).chr(130) => 'A', chr(195).chr(131) => 'A',
    chr(195).chr(132) => 'A', chr(195).chr(133) => 'A',
    chr(195).chr(135) => 'C', chr(195).chr(136) => 'E',
    chr(195).chr(137) => 'E', chr(195).chr(138) => 'E',
    chr(195).chr(139) => 'E', chr(195).chr(140) => 'I',
    chr(195).chr(141) => 'I', chr(195).chr(142) => 'I',
    chr(195).chr(143) => 'I', chr(195).chr(145) => 'N',
    chr(195).chr(146) => 'O', chr(195).chr(147) => 'O',
    chr(195).chr(148) => 'O', chr(195).chr(149) => 'O',
    chr(195).chr(150) => 'O', chr(195).chr(153) => 'U',
    chr(195).chr(154) => 'U', chr(195).chr(155) => 'U',
    chr(195).chr(156) => 'U', chr(195).chr(157) => 'Y',
    chr(195).chr(159) => 's', chr(195).chr(160) => 'a',
    chr(195).chr(161) => 'a', chr(195).chr(162) => 'a',
    chr(195).chr(163) => 'a', chr(195).chr(164) => 'a',
    chr(195).chr(165) => 'a', chr(195).chr(167) => 'c',
    chr(195).chr(168) => 'e', chr(195).chr(169) => 'e',
    chr(195).chr(170) => 'e', chr(195).chr(171) => 'e',
    chr(195).chr(172) => 'i', chr(195).chr(173) => 'i',
    chr(195).chr(174) => 'i', chr(195).chr(175) => 'i',
    chr(195).chr(177) => 'n', chr(195).chr(178) => 'o',
    chr(195).chr(179) => 'o', chr(195).chr(180) => 'o',
    chr(195).chr(181) => 'o', chr(195).chr(182) => 'o',
    chr(195).chr(182) => 'o', chr(195).chr(185) => 'u',
    chr(195).chr(186) => 'u', chr(195).chr(187) => 'u',
    chr(195).chr(188) => 'u', chr(195).chr(189) => 'y',
    chr(195).chr(191) => 'y',
    // Decompositions for Latin Extended-A
    chr(196).chr(128) => 'A', chr(196).chr(129) => 'a',
    chr(196).chr(130) => 'A', chr(196).chr(131) => 'a',
    chr(196).chr(132) => 'A', chr(196).chr(133) => 'a',
    chr(196).chr(134) => 'C', chr(196).chr(135) => 'c',
    chr(196).chr(136) => 'C', chr(196).chr(137) => 'c',
    chr(196).chr(138) => 'C', chr(196).chr(139) => 'c',
    chr(196).chr(140) => 'C', chr(196).chr(141) => 'c',
    chr(196).chr(142) => 'D', chr(196).chr(143) => 'd',
    chr(196).chr(144) => 'D', chr(196).chr(145) => 'd',
    chr(196).chr(146) => 'E', chr(196).chr(147) => 'e',
    chr(196).chr(148) => 'E', chr(196).chr(149) => 'e',
    chr(196).chr(150) => 'E', chr(196).chr(151) => 'e',
    chr(196).chr(152) => 'E', chr(196).chr(153) => 'e',
    chr(196).chr(154) => 'E', chr(196).chr(155) => 'e',
    chr(196).chr(156) => 'G', chr(196).chr(157) => 'g',
    chr(196).chr(158) => 'G', chr(196).chr(159) => 'g',
    chr(196).chr(160) => 'G', chr(196).chr(161) => 'g',
    chr(196).chr(162) => 'G', chr(196).chr(163) => 'g',
    chr(196).chr(164) => 'H', chr(196).chr(165) => 'h',
    chr(196).chr(166) => 'H', chr(196).chr(167) => 'h',
    chr(196).chr(168) => 'I', chr(196).chr(169) => 'i',
    chr(196).chr(170) => 'I', chr(196).chr(171) => 'i',
    chr(196).chr(172) => 'I', chr(196).chr(173) => 'i',
    chr(196).chr(174) => 'I', chr(196).chr(175) => 'i',
    chr(196).chr(176) => 'I', chr(196).chr(177) => 'i',
    chr(196).chr(178) => 'IJ',chr(196).chr(179) => 'ij',
    chr(196).chr(180) => 'J', chr(196).chr(181) => 'j',
    chr(196).chr(182) => 'K', chr(196).chr(183) => 'k',
    chr(196).chr(184) => 'k', chr(196).chr(185) => 'L',
    chr(196).chr(186) => 'l', chr(196).chr(187) => 'L',
    chr(196).chr(188) => 'l', chr(196).chr(189) => 'L',
    chr(196).chr(190) => 'l', chr(196).chr(191) => 'L',
    chr(197).chr(128) => 'l', chr(197).chr(129) => 'L',
    chr(197).chr(130) => 'l', chr(197).chr(131) => 'N',
    chr(197).chr(132) => 'n', chr(197).chr(133) => 'N',
    chr(197).chr(134) => 'n', chr(197).chr(135) => 'N',
    chr(197).chr(136) => 'n', chr(197).chr(137) => 'N',
    chr(197).chr(138) => 'n', chr(197).chr(139) => 'N',
    chr(197).chr(140) => 'O', chr(197).chr(141) => 'o',
    chr(197).chr(142) => 'O', chr(197).chr(143) => 'o',
    chr(197).chr(144) => 'O', chr(197).chr(145) => 'o',
    chr(197).chr(146) => 'OE',chr(197).chr(147) => 'oe',
    chr(197).chr(148) => 'R',chr(197).chr(149) => 'r',
    chr(197).chr(150) => 'R',chr(197).chr(151) => 'r',
    chr(197).chr(152) => 'R',chr(197).chr(153) => 'r',
    chr(197).chr(154) => 'S',chr(197).chr(155) => 's',
    chr(197).chr(156) => 'S',chr(197).chr(157) => 's',
    chr(197).chr(158) => 'S',chr(197).chr(159) => 's',
    chr(197).chr(160) => 'S', chr(197).chr(161) => 's',
    chr(197).chr(162) => 'T', chr(197).chr(163) => 't',
    chr(197).chr(164) => 'T', chr(197).chr(165) => 't',
    chr(197).chr(166) => 'T', chr(197).chr(167) => 't',
    chr(197).chr(168) => 'U', chr(197).chr(169) => 'u',
    chr(197).chr(170) => 'U', chr(197).chr(171) => 'u',
    chr(197).chr(172) => 'U', chr(197).chr(173) => 'u',
    chr(197).chr(174) => 'U', chr(197).chr(175) => 'u',
    chr(197).chr(176) => 'U', chr(197).chr(177) => 'u',
    chr(197).chr(178) => 'U', chr(197).chr(179) => 'u',
    chr(197).chr(180) => 'W', chr(197).chr(181) => 'w',
    chr(197).chr(182) => 'Y', chr(197).chr(183) => 'y',
    chr(197).chr(184) => 'Y', chr(197).chr(185) => 'Z',
    chr(197).chr(186) => 'z', chr(197).chr(187) => 'Z',
    chr(197).chr(188) => 'z', chr(197).chr(189) => 'Z',
    chr(197).chr(190) => 'z', chr(197).chr(191) => 's',
    '/' => '_'
  );

  $string = strtr($string, $chars);
  $string = str_replace(' ', '_', $string);
  $string = str_replace(',', '_', $string);
  return $string;
}

function matrix_compare_page() {

  $colors = array('red', 'green', 'blue', 'purple', 'yellow');

  $nodes = node_load_multiple(array(), array('type' => 'heti_ajanlat'));
  $nodes = reset($nodes);
  $terms = $nodes->field_kategoria[LANGUAGE_NONE];
  $lefts = matrix_tax2flat_array($terms);
  //$lefts = array('Sajt', 'Hus', 'Sor', 'aaa', 'bbb');


  $vocabulary = taxonomy_vocabulary_machine_name_load('aruhaz');
  $terms2 = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  $tops = matrix_tax2flat_array($terms2);
  //$tops = array('Spar', 'Tesco', 'Lidl', 'CBA');


  $header = '<div class="cell" id="corner">&nbsp</div>';
  $header .= '<div id="header">';
  $c = 0;
  foreach ($tops as $top) {
    $header .= '<div class="cell ' . convert($top) . '" data-name="' . convert($top) . '">' . $top . '</div>';
    $c++;
  }
  $header .= '</div>';
  matrix_add_tr($header);

  $table = '<div id="tableBody">';
  foreach ($lefts as $left) {
    $table .= '<div class="table-row">';
    $table .= '<div class="cell starter_cell" data-name="' . convert($left) . '"><label>' . $left . '</label>' . matrix_add_plus_minus('amount_' . convert($left)) . '</div>';
    foreach ($tops as $top) {
      $table .= '<div class="cell ' . convert($top) . '" data-cell="' . convert($left) .'_' . convert($top) . '" data-shop="' . convert($top) . '">' . $left . '(' . $top . ')' . '</div>';
    }
//    $table .= '<div class="deleteRow" data-name="' . convert($left) . '">X</div>';
    $table .= '</div>';
    matrix_add_tr($table);

  }
  $table .= '</div>';


  /*$table .= '<select name="addRow" class="addRow">';
  $table .= '<option value="0"> ---- Add your selection! ---- </option>';
  foreach ($terms as $term) {
    if (!in_array($term->name, $lefts)) {
      $table .= '<option value="' . convert($term->name) . '">' . $term->name . '</option>';
    }
  }
  $table .= '</select>';

  matrix_add_tr($table);*/

  $table .= '<div class="cell" id="corner">&nbsp</div>';
  foreach ($tops as $top) {
    $table .= '<div class="cell ' . convert($top) . '" data-shop="' . convert($top) . '">' . matrix_add_bottom_button(convert($top)) . '</div>';
  }
  matrix_add_tr($table);

  $vars = array(
    'table' => $header . $table,
  );


  return theme('matrix_compare_page', $vars) . theme('matrix_cart', array());
}

function matrix_add_selected($selected, $amount) {

}